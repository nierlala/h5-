{"version":3,"sources":["xl/Input.js","xl/List.js","xl/TodoList.js","index.js"],"names":["Input","htmlFor","id","value","this","props","inpValue","type","onChange","handleChange","onClick","addTodo","Component","List","arr1","todos","filter","item","done","arr2","length","renderTodos","Control","e","setState","target","state","title","delTodo","idx","index","toggle","newTodos","JSON","parse","stringify","map","todo","checked","dangerouslySetInnerHTML","__html","localStorage","getItem","setItem","className","ReactDOM","render","TodoList","document","getElementById"],"mappings":"6KAwBeA,E,kDApBX,aAAc,wC,qDAKV,OACI,6BACG,2BAAOC,QAAQ,OAAf,YACC,2BACIC,GAAG,MACHC,MAAOC,KAAKC,MAAMC,SAClBC,KAAK,OACLC,SAAUJ,KAAKC,MAAMI,eAEzB,4BAAQC,QAASN,KAAKC,MAAMM,SAA5B,qB,GAfIC,aCwBLC,E,kDAvBX,aAAc,wC,qDAKV,IAAIC,EAAOV,KAAKC,MAAMU,MAAMC,QAAQ,SAAAC,GAAI,OAAKA,EAAKC,QAC9CC,EAAOf,KAAKC,MAAMU,MAAMC,QAAQ,SAAAC,GAAI,OAAIA,EAAKC,QACjD,OACI,6BAEI,uDAASJ,EAAKM,QACd,4BACKhB,KAAKC,MAAMgB,aAAY,IAE5B,uDAASF,EAAKC,QACd,4BACKhB,KAAKC,MAAMgB,aAAY,S,GAjBzBT,aCoGJU,E,kDAhGX,WAAYjB,GAAO,IAAD,8BACd,cAAMA,IAMVI,aAAe,SAACc,GACZ,EAAKC,SAAS,CAAClB,SAASiB,EAAEE,OAAOtB,SARnB,EAwBlBQ,QAAU,WACkB,IAArB,EAAKe,MAAMpB,WAGd,EAAKkB,SAAS,CACVT,MAAM,CACF,CACIY,MAAO,EAAKD,MAAMpB,SAClBY,MAAM,IAHT,mBAKE,EAAKQ,MAAMX,UAGtB,EAAKS,SAAS,CAAClB,SAAS,OArCV,EAwClBsB,QAAU,SAACC,GACP,EAAKL,SAAS,CACVT,MAAO,EAAKW,MAAMX,MAAMC,QAAO,SAACC,EAAKa,GAAN,OAAcA,GAAOD,QA1C1C,EA8ClBE,OAAS,SAACD,GACN,IAAIE,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKT,MAAMX,QACpDiB,EAASF,GAAOZ,MAAQc,EAASF,GAAOZ,KACxC,EAAKM,SAAS,CACVT,MAAOiB,KAlDG,EAqDlBX,YAAc,SAACH,GACX,OAAO,EAAKQ,MAAMX,MAAMqB,KAAI,SAACC,EAAKR,GAC9B,GAAGX,GAAMmB,EAAKnB,KACV,OAAO,4BACH,2BACIR,QAAS,kBAAI,EAAKqB,OAAOF,IACzBS,QAASpB,EACTX,KAAK,aAET,0BAAMgC,wBAAyB,CAACC,OAAOH,EAAKV,SAC5C,4BACIjB,QAAS,kBAAI,EAAKkB,QAAQC,KAD9B,qBA7DZ,EAAKH,MAAQ,CACTpB,SAAU,GACVS,MAAM,IAJI,E,gEAWd,IAAIA,EAAQ0B,aAAaC,QAAQ,SAC9B3B,GACCX,KAAKoB,SAAS,CACVT,MAAOkB,KAAKC,MAAMnB,O,2CAK1B0B,aAAaE,QACT,QACAV,KAAKE,UAAU/B,KAAKsB,MAAMX,U,+BAmDxB,IAAD,EAEoBX,KAAKsB,MAAvBX,EAFF,EAEEA,MAAMT,EAFR,EAEQA,SACFS,EAAMC,QAAQ,SAAAC,GAAI,OAAKA,EAAKC,QAC5BH,EAAMC,QAAQ,SAAAC,GAAI,OAAIA,EAAKC,QAEtC,OACI,yBAAK0B,UAAU,OAEX,kBAAC,EAAD,CAAOtC,SAAUA,EACbG,aAAcL,KAAKK,aACnBE,QAASP,KAAKO,UAElB,kBAAC,EAAD,CAAMU,YAAajB,KAAKiB,YACpBN,MAAOA,EACPD,KAAMV,KAAKU,KACXK,KAAMf,KAAKe,Y,GAzFTP,aC+GtBiC,IAASC,OAEP,kBAACC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.de331527.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Input extends Component{\r\n    constructor(){\r\n        super();\r\n        \r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n               <label htmlFor=\"inp\">todolist</label>\r\n                <input \r\n                    id='inp'\r\n                    value={this.props.inpValue} \r\n                    type=\"text\" \r\n                    onChange={this.props.handleChange}\r\n                />\r\n                <button onClick={this.props.addTodo}>添加</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input;\r\n\r\n","import React, { Component } from 'react'\r\n\r\n\r\nclass List extends Component{\r\n    constructor(){\r\n        super();\r\n        \r\n    }\r\n    render(){\r\n        let arr1 = this.props.todos.filter( item => !item.done)\r\n        let arr2 = this.props.todos.filter( item => item.done)\r\n        return (\r\n            <div>\r\n                \r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul>\r\n                    {this.props.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成{arr2.length}</h2>\r\n                <ul>\r\n                    {this.props.renderTodos(true)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;\r\n\r\n","import React, { Component } from 'react';\r\nimport Input from './Input'\r\nimport List from './List'\r\n\r\n\r\n\r\nclass Control extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[]\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    componentDidMount(){\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n    addTodo = ()=>{\r\n        if(this.state.inpValue==''){\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos: [\r\n                {\r\n                    title: this.state.inpValue,\r\n                    done: false\r\n                },\r\n                ...this.state.todos\r\n            ]\r\n        })\r\n        this.setState({inpValue:''})\r\n\r\n    }\r\n    delTodo = (idx)=>{\r\n        this.setState({\r\n            todos: this.state.todos.filter((item,index)=>index!=idx)\r\n        });\r\n\r\n    }\r\n    toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos: newTodos\r\n        })\r\n    }\r\n    renderTodos = (done)=>{\r\n        return this.state.todos.map((todo,idx)=>{\r\n            if(done==todo.done){\r\n                return <li>\r\n                    <input \r\n                        onClick={()=>this.toggle(idx)}\r\n                        checked={done} \r\n                        type=\"checkbox\"\r\n                    />\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button \r\n                        onClick={()=>this.delTodo(idx)}\r\n                    >\r\n                        删除\r\n                    </button>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        \r\n        const {todos,inpValue} = this.state;\r\n        let arr1 = todos.filter( item => !item.done)\r\n        let arr2 = todos.filter( item => item.done)\r\n\r\n        return (\r\n            <div className=\"box\">\r\n\r\n                <Input inpValue={inpValue} \r\n                    handleChange={this.handleChange} \r\n                    addTodo={this.addTodo}/>\r\n                \r\n                <List renderTodos={this.renderTodos} \r\n                    todos={todos}\r\n                    arr1={this.arr1}\r\n                    arr2={this.arr2}\r\n                />\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Control;","// import React from 'react';\n// // import ReactDOM from 'react-dom';\n// // import './index.css';\n// // import App from './App';\n// // import * as serviceWorker from './serviceWorker';\n\n//  let ele =  <h1 id=\"title\" className=\"tit\">\n   \n//    react\n//    <div>hello</div>\n//    <div>{['hello','world']}</div>\n//    <div>hello</div>\n//    </h1>;\n// //=>\n// // let ele = React.cloneElement(\n// //   'h1',\n// //   {id:'title'},\n// //   React.cloneElement('div',{},'hello'),\n// //   'react'\n// //   )\n\n// console.log(ele);\n\n// //将JSX渲染到DOM中\n// let ReactDOM = {\n//   render(eleObj,container){\n//     //解构\n//     const{type,props}=eleObj;\n//     //创建第一层节点\n//     let ele = document.createElement(type);\n//     //遍历属性对象，将属性添加到第一层节点对象上\n//     for (const prop in props) {\n\n//       if(prop == 'children'){\n//         if(typeof props.children == 'string'){\n//           const txtNode = document.creatTextNode(props[prop]);\n//           ele.appendChild(txtNode);\n//           break;\n//         }\n\n//         //将第一层节点对象的子元素添加进去\n//         props.children.forEach(child=>{\n//           if(typeof child == 'string'){\n//             const txtNode = document.creatTextNode(child);\n//             ele.appendChild(txtNode);\n//           }else{\n//               ReactDOM.render(child,ele);\n//           }\n//         })\n//       }\n//       else{\n//         ele[prop] = props[prop];\n//       }\n      \n//     }\n\n//     //将第一层DOM节点添加到container中\n//     container.appendChild(ele);\n//   }\n// }\n\n// ReactDOM.render(\n//    ele,\n//   document.getElementById('root')\n// );\n\n// /* \n//   1.原生js,DOM操作(JQ)\n//   2.Reatc: 开发效率高，性能高\n//   3.环境搭建，创建一个项目、运行\n//   4.JSX语法\n// */\n\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n\n// // serviceWorker.unregister();\n\n\n\n\n\n//*********************** */\n\n\n\n// import React from 'react';\n// import ReactDOM, { render } from 'react-dom';\n// import Control from './components/Control';\n// import Home from './pages/Home'\n// import Demo01 from './pages/Demo01'\n// import App from './pages/App'\n// import Hoc,{Detail} from './pages/Hoc' //都是Hoc.js文件  {}命名导出\n// import Hook from './pages/Hook'\n// import Context from './pages/context'\n// console.log(Context);\n\n\n// ReactDOM.render(\n//   <Context.Provider value='123'>\n//     <Hook/>\n//   </Context.Provider>,\n  \n//   document.getElementById('root')\n// );\n\n\n\n\n\nimport React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport TodoList from './xl/TodoList';\n\n\nReactDOM.render(\n\n  <TodoList />,\n  document.getElementById('root')\n);\n\n\n\n\n\n\n\n//组件声明\n//函数组件\n//UI(展示组件)，木偶文件\n//函数\n// function App(props){\n//   console.log(props);\n//   const {title,id} = props;\n//   return <div>\n//     <h1>组件</h1>\n//     <div>{title}</div>\n//     <div>{id}</div>\n//   </div>\n// }\n\n//时间\n//  let ele =  <h1 id=\"title\" className=\"tit\">\n//    <div>当前时间</div>\n//    {new Date().toLocaleString()}\n//  </h1>;\n\n//=>\n// let ele = React.cloneElement(\n//   'h1',\n//   {id:'title'},\n//   React.cloneElement('div',{},'hello'),\n//   'react'\n//   )\n\n// console.log(ele);\n\n//智能组价\n// class Demo extends React.Component{\n//   constructor(){\n//     super();\n//     //声明状态\n//     this.state={\n//       name:new Date().toLocaleString()\n//     }\n//     setInterval(()=>{\n//       this.setState({name:new Date().toLocaleString()})\n//     },1000)\n//   }\n//   render(){\n//     return  <div>\n//       <div>name:{this.state.name}</div>\n//       <App title={this.state.name}></App>\n//       {/* <App title='任意值1' id='app'></App>\n//       <App title='任意值1' id='app'></App>\n//       <App title='任意值1' id='app'></App> */}\n//     </div>\n//   }\n// }\n\n// import $ from 'jquery';\n\n// console.log($);\n\n// let List = (props) => {\n//   return <ul>\n//       {\n//         props.data.map(\n//           (item)=><li key={item.id}>{item.title}</li>\n//           )}\n//     </ul>\n//  }\n\n//  const Buttons = ()=>{\n//    const btns=[1,2,3,4,5];\n\n//    const handleClick=(num)=>{\n//      //事件对象\n//      console.log(num)\n//    }\n\n//     return <div>\n//       {\n//         btns.map((item)=>\n//           <button \n//           key={item} \n//           onClick={()=>handleClick(item)}\n//           >\n//             {item}\n//           </button>)\n//       }\n//     </div>\n//  }\n\n// alt shift + 上下键   复制一行\n// alt + 上下键         移动一行\n// 按住alt ，鼠标点击\n// Ctrl + shift + 左右键，选中整个单词\n// ctrl+shift+L \n\n\n// let List = (props)=>{\n//   return <ul>\n//     {\n//       props.data.map(\n//         (item)=><li key={item.id}>{item.title}</li>\n//       )\n//     }\n//   </ul>\n// }\n\n// class Home extends React.Component{\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       data:[]\n//     }\n//     // this.handleClick = this.handleClick.bind(this)\n//   }\n//   componentDidMount(){\n//     fetch('https://cnodejs.org/api/v1/topics')\n//     .then(res=>res.json())\n//     .then( ({data}) => {\n//       this.setState({data})\n//     })\n//   }\n//   getData = (page)=>{\n//     fetch('https://cnodejs.org/api/v1/topics?page='+page)\n//     .then(res=>res.json())\n//     .then( ({data}) => {\n//       this.setState({data})\n//     })\n//   }\n//   render(){\n//     const { data } = this.state;\n//     const btns = [1,2,3,4,5];\n//     return <div>\n//       {\n//         btns.map(\n//           (item)=>(\n//             <button \n//               key={item}\n//               onClick={()=>this.getData(item)}\n//             >\n//               {item}\n//             </button>\n//         ))\n//       }\n//       <List data={data}/>\n//     </div>\n//   }\n// }\n\n// ReactDOM.render(\n//   <Home data='abc'/>,\n//   document.getElementById('root')\n// );\n\n/* \n  1.原生js,DOM操作(JQ)\n  2.Reatc: 开发效率高，性能高\n  3.环境搭建，创建一个项目、运行\n  4.JSX语法\n  */\n \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}